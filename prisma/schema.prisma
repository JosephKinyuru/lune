// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id                    String              @id
  username              String              @unique
  displayName           String
  email                 String?             @unique
  passwordHash          String?
  googleId              String?             @unique
  githubId              String?             @unique
  avatar_url            String?
  profile_banner_url    String?
  dateOfBirth           DateTime?
  bio                   String?
  location              String?
  website               String?
  is_Verified           Boolean             @default(false)
  is_Banned             Boolean             @default(false)
  is_Suspended          Boolean             @default(false)
  is_Deactivated        Boolean             @default(false)
  is_Private            Boolean             @default(false)
  sessions              Session[]
  posts                 Post[]
  reposts               Repost[]
  following             Follow[]            @relation("Following")
  followers             Follow[]            @relation("Followers")
  likes                 Like[]
  bookmarks             Bookmark[]
  comments              Comment[]
  receivedNotifications Notification[]      @relation("Recipient")
  issuedNotifications   Notification[]      @relation("Issuer")
  resetPasswordToken    ResetPasswordToken?

  createdAt DateTime @default(now())

  @@map("users")
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model ResetPasswordToken {
  id             Int      @id @default(autoincrement())
  userId         String   @unique
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  token          String   @unique
  tokenExpiresAt DateTime
  otp            String
  otpExpiresAt   DateTime
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("reset_password_tokens")
}

model VerifyEmailToken {
  id             String   @id @default(cuid())
  email          String
  token          String   @unique
  tokenExpiresAt DateTime
  otp            String
  otpExpiresAt   DateTime
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("verify_email_tokens")
}

model Follow {
  followerId  String
  follower    User   @relation("Following", fields: [followerId], references: [id], onDelete: Cascade)
  followingId String
  following   User   @relation("Followers", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@map("follows")
}

model Post {
  id                  String         @id @default(cuid())
  content             String
  userId              String
  user                User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  attachments         Media[]
  likes               Like[]
  bookmarks           Bookmark[]
  comments            Comment[]
  linkedNotifications Notification[]
  reposts             Repost[]       @relation("OriginalPost")
  createdAt           DateTime       @default(now())

  @@map("posts")
}

model Repost {
  id           String   @id @default(cuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId       String
  originalPost Post     @relation("OriginalPost", fields: [postId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())

  @@unique([userId, postId])
  @@map("reposts")
}

model Media {
  id     String    @id @default(cuid())
  postId String?
  post   Post?     @relation(fields: [postId], references: [id], onDelete: SetNull)
  type   MediaType
  url    String

  createdAt DateTime @default(now())

  @@map("post_media")
}

enum MediaType {
  IMAGE
  VIDEO
}

model Comment {
  id      String @id @default(cuid())
  content String
  userId  String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId  String
  post    Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@map("comments")
}

model Like {
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@map("likes")
}

model Bookmark {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([userId, postId])
  @@map("bookmarks")
}

model Notification {
  id          String           @id @default(cuid())
  recipientId String
  recipient   User             @relation("Recipient", fields: [recipientId], references: [id], onDelete: Cascade)
  issuerId    String
  issuer      User             @relation("Issuer", fields: [issuerId], references: [id], onDelete: Cascade)
  postId      String?
  post        Post?            @relation(fields: [postId], references: [id], onDelete: Cascade)
  type        NotificationType
  read        Boolean          @default(false)

  createdAt DateTime @default(now())

  @@map("notifications")
}

enum NotificationType {
  LIKE
  FOLLOW
  COMMENT
  REPOST
}
